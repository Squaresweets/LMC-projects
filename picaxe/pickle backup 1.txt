init:
	clrf   PORTB        ; clear PORTB output latches
    	bsf    STATUS,RP0   ; memory page 1
    	movlw  b'11111111'  ; set portA pins to input 
    	movwf  TRISA        ; write to TRIS register 
    	movlw  b'00000000'  ; set portB pins to output 
    	movwf  TRISB        ; write to TRIS register 
    	bcf    STATUS,RP0   ; memory page 0
	
	INDF   EQU @bptr    ;this is where the magic happens
	FSR    EQU bptr
	
	xm	 EQU b0       ;most significant bit of x
	xl     EQU b1       ;least significant bit of x
	
	PC     EQU b2       ;program counter
	
	accm   EQU b3
	accl   EQU b4
	
	tmpm	 EQU b19      ;Preserved
	tmp	 EQU b20      ;multipurpose temp register
	dab    EQU b21      ;destination address backup
	sab    EQU b23      ;source address backup
	ctmp2  EQU b24      ;temp register coroutines use
	ctmp   EQU b25      ;temp register coroutines use
	SA	 EQU b26      ;source address
	DA	 EQU b27      ;destination address
	
	;Constants
	base   EQU 0x30     ;The base address for where the data is stored in ram
	acc    EQU 0x3      ;The accumulator
	
	
	
	movlw  base
	movwf  PC
	call   ldapgrm
	
main:
	movfw  PC
	movwf  SA
	call   wmovsx
	
	
HLT:  call   xsubchk
	btfss  tmp,0
	goto   ADD
hang: goto   hang     ;cause "END" doesn't seem to work
	
ADD:  call   xsubchk
	btfss  tmp,0     ;if the msb is 1, the number was between 100 and 200
	goto   SUB
	call   xaddhun
	
	movlw  acc
	movwf  sa
	
	call   xl2loc
	
	movwf  da
	call   waddsd       ;add together the accumulator and whatever is left in x
	;Move x to the accumulator
	movlw  acc
	movwf  da           ;the destination is the accumulator
	call   wmovxd 
	goto   nxt
	
SUB:  call   xsubchk
	btfss  tmp,0     ;if the msb is 1, the number was between 200 and 300
	goto   STA
	call   xaddhun
	
	movlw  acc          ;the source is subtracted from the destination, so we do it this way round
	movwf  da
	call   xl2loc
	movwf  sa
	call   wsubsd       ;subtract whatever is left in x from teh accumulator
	;Move x to the accumulator
	movlw  acc
	movwf  da           ;the destination is the accumulator
	call   wmovxd 
	
	goto   nxt
	
STA:  call   xsubchk
	btfss  tmp,0        ;if the msb is 1, the number was between 300 and 400
	goto   STO
st:   call   xaddhun
	
	movlw  acc
	movwf  sa
	
	call   xl2loc
	
	movwf  da
	call   movsd        ;move accumulator to x
	goto nxt
	
STO:  call   xsubchk
	btfss  tmp,0        ;if the msb is 1, the number was between 300 and 400
	goto   LDA
	goto   st

LDA:  call   xsubchk
	btfss  tmp,0     ;if the msb is 1, the number was between 400 and 500
	goto   BRA
	call   xaddhun
	
	call   xl2loc
	
	movwf  sa
	movlw  acc
	movwf  da
	call   wmovsd       ;move x to accumulator
	goto   nxt
	
BRA:  call   xsubchk
	btfss  tmp,0         ;if the msb is 1, the number was between 500 and 600
	goto   BRZ
	call   xaddhun
	
br:   call   xl2loc
	movwf  PC
	goto   main         ;skip the adding stuff to pc
	
	
BRZ:  call   xsubchk
	btfss  tmp,0         ;if the msb is 1, the number was between 600 and 700
	goto   BRP
	call   xaddhun
	
	;Now we check if accm and accl are zero
	movf   accm,F             
	btfss  STATUS,Z
	goto   nxt         ;in this case,  it is not zero
	movf   accl,F             
	btfss  STATUS,Z
	goto   nxt         ;in this case,  it is not zero
	
	goto   br
	
BRP:  call   xsubchk
	btfss  tmp,0         ;if the msb is 1, the number was between 700 and 800
	goto   IO
	
	BTFSS  accm,7         ;check the highest bit of accm to see if it is negative or not
	goto   br
	
	call   xaddhun
	
IO:   call   xsubchk
	btfss  tmp,0     ;if the msb is 1, the number was between 800 and 900
	END
	nop
	call   xaddhun
	btfss  xl,0     ;Check if the first bit is on, if it is we take input
	goto   out
in:   movfw  PORTA
	movwf  accl
	goto   nxt
out:  movfw  accl
	movwf  PORTB
	goto   nxt
	
nxt: 
	incf   PC,F
	incf   PC,F
	goto   main          ;Go back and do it all again lol
	
	
	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Helper functions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
movsd: ;move sa to da
	movfw  SA
	movwf  FSR
	movfw  INDF
	movwf  ctmp          ;we've got the goods
	
	movfw  DA
	movwf  FSR
	
	movfw  ctmp
	movwf  INDF          ;send it of o7
	return
movsw: ;move sa to w
	movlw  0x19          ;our destination is w
	movwf  DA
	call   movsd
	return
wmovxd: ;move x to da
	clrf   SA            ;our source is 0 (where x is)
	call   wmovsd
	return
wmovsx: ;move sa to x
	clrf   DA            ;our destination is 0 (where x is)
	call   wmovsd
	return
wmovsd: ;move word from source address to destination address
	call   movsd         ;grab the msb
	incf   SA,F          ;increment source address
	incf   DA,F          ;increment destination address
	call   movsd         ;grab the lsb
	decf   SA,F          ;return them to how they were
	decf   DA,F
	return
addsd: ;add s and d and store in w
	movfw  sa            ;backup our variables
	movwf  sab
	movfw  da
	movwf  dab
	
	call   movsw         ;grab the source into ctmp2
	movwf  ctmp2
	movfw  dab
	movwf  sa
	call   movsw         ;grab the dest and add to ctmp2
	addwf  ctmp2,F
	
	movfw  sab           ;reset it back
	movwf  sa
	movfw  dab
	movwf  da
	movfw  ctmp2
	return
waddsd: ;add source and destination, and store in x
	call   addsd         ;add the two msbs together
	movwf  xm            ;store the msb in xm
	
	incf   SA,F          ;increment source address
	incf   DA,F          ;increment destination address
	
	call   addsd
	movwf  xl
	
	btfsc  STATUS,C      ;if we had a carry, we need to add one to the msb
	incf   xm,F 
	
	decf   SA,F          ;return them to how they were
	decf   DA,F
	
	return
wsubsd:  ;subtract source from destination, and store it in x
	call   wmovsx        ;grab the source (the one we gotta invert)
	call   chsignx       ;make the source negative
	
	clrf   sa            ;make the source now be x, since we don't want to have to move it back
	
	call   waddsd
	
	return
chsignx:
	COMF   xl,F
	COMF   xm,F
	INCF   xl,F
	btfsc  STATUS,C      ;if we had a carry, we need to add one to the msb
	incf   xm,F 
	return
xsubchk: ;Subtract 100 from x
	;put the -100 in the thing
	movlw  b'11111111'
	movwf  tmpm
	movlw  b'10011100'
	movwf  tmp
	
	clrf   sa            ;our source is x
	movlw  19
	movwf  da            ;our destination is 21(tmp)
	
	call   waddsd
	
	;work out if it is less than or equal to 0, in which case we set bit 0 of tmp to on
	clrf   tmp
	btfsc  xm,7
	bsf    tmp,0      ;it is less than 100
	
	;This little (check if equal to 0) thing could be moved to elsewhere
	movf   xm,F             
	btfss  STATUS,Z
	return            ;it is not 0, so return
	nop               ;for some reason the btfss doesn't count the return, so we need an operation here to skip over
	movf   xl,F             
	btfsc  STATUS,Z
	bsf    tmp,0      ;it is 0
	nop
	return
	
xaddhun: ;add 100 to x
	movlw  100
	movwf  tmp           ;100 in temp
	clrf   tmpm
	clrf   sa            ;our source is x
	movlw  19
	movwf  da            ;our destination is 21(tmp)
	
	call   waddsd
	return
xl2loc: ;convert xl to a location in memory and put it in w
	movfw  xl
	addwf  xl,W         ;add it twice to get the actual location
	addlw  base         ;you need to shift it with the base
	return
	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Load the program;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
blit:
	movwf   tmp
	call    movsd
	incf    da,F
	return
ldapgrm:
	movlw  20           ;our source is always temp
	movwf  sa
	movlw  base         ;our destination starts out with being base, but is incremented each time
	movwf  da
	
	movlw  0x01         ;507: LDA 7
	call   blit
	movlw  0xFB
	call   blit
	
	movlw  0x00         ;206: SUB 6
	call   blit
	movlw  0xCE         
	call   blit
	
	movlw  0x01         ;307: STA 7
	call   blit
	movlw  0x33
	call   blit
	
	movlw  0x03         ;902: OUT
	call   blit
	movlw  0x86 
	call   blit
	
	movlw  0x03         ;799: BRA 99
	call   blit
	movlw  0x1F  
	call   blit
	
	movlw  0x02         ;600: BRA 0
	call   blit
	movlw  0x58 
	call   blit
	
	movlw  0x00         ;1
	call   blit
	movlw  0x01 
	call   blit
	
	movlw  0x00         ;10
	call   blit
	movlw  0x0A 
	call   blit
	
	
	
	return
	
	
